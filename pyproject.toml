[project]
name = "spdb"
version = "0.1.0"
description = ""
authors = [
    { name = "Kamil Urbanek", email = "urbanek.kamil@gmail.com" },
]
requires-python = ">=3.10"

[tool.poetry]
readme = "README.md"
license = "MIT"

[tool.poetry.dependencies]
python = "^3.10"
pydantic = "^2.10"
office365-rest-python-client = "^2"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.8"
pytest = "^8.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 80
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "__init__.py",
]

[tool.ruff.lint]
select = [
    "E", # pycodestyle error
    "F", # flake8 error
    "A", # builtin shadowing
    "B", # flake8 bugbear
    "BLE", # aboid bare excepts
    "C4", # simplify comprehensions
    "DTZ", # datetime errors
    "FBT", # avoid boolean trap
    "G", # logging format
    "I", # isort imports
    "N", # conform to PEP8 naming rules
    "RET", # return values
    "S", # bandit
    "TRY", # exceptions antipatterns
    "UP", # upgade syntax
    "W", # pycodestyle warning
    "YTT", # wrong usage of sys.info
#    "ANN003",
#    "ANN001",
#    "ANN201",
#    "D100",
#    "D101",
#    "D103",
]
ignore = [
    "B011",
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY400", # Use `logging.exception` instead of `logging.error`
    "G004", # Logging statement uses f-string
    "E501",
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "S311",  # Standard pseudo-random generators are not suitable for cryptographic purposes
    "D100",  # Missing docstring in public module
    "TRY300", # Consider moving this statement to an `else` block
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "BLE001",  # Do not catch blind exception: `Exception`
]


[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 72


[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs,scripts}/*" = [
    "E402",
    "ANN",  # Missing type annotation for function argument
    "S101",  # Use of `assert` detected
    "D",  # Missing docstring in public function
]
